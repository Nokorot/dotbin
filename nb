#!/bin/bash

source .uservars
[ -z $NOTEBOOK_DIR ] && NOTEBOOK_DIR="~/NOTEBOOK"

PRINT=false
NEWWIN=false
DELETE=false
RENAME=false
MENU="dmenu"
PERSISTENT=false

_dmenu() {
    dmenu -i -l 20 
}

_tmenu() {
    tmenu -i "$@"
}

_menu() {
  case "$MENU" in
      dmenu) 
          cat "$1" | _dmenu > "$2";;
      tmenu) 
           _tmenu $1 $2;;
       *)
           echo "ERROR: Menu '$MENU' not supported";
   esac
}

list(){
    ls "$NOTEBOOK_DIR" | grep 'md$' | sed 's/.md$//'
}

open() {
    $NEWWIN && { ONSTART="nvim -p \"$@\"" $TERMINAL; } \
        || nvim -p "$@";
}

choose() {
  [ -z "$2" ] || { 
      CHOISE="$2"; return; 
  }

  choisef=$(mktemp)
  _menu $1 $choisef
  CHOISE=$(cat $choisef)
}

delete() {
  [ -z "$1" ] && return;

  prompt "Do you realy want delete '$CHOISE'?" && \
      rm "$CHOISE.md"
}

rename() {
  [ -z "$1" ] && return
  namef=$(mktemp)
  printf "%s" "$1" > $namef

  $NEWWIN && { ONSTART="nvim \"$namef\"" $TERMINAL; } \
      || nvim "$namef";

  newname="$(< $namef sed q1)"
  rm $namef 

  ## TODO: Check that the name is not problematic
  case $newname in
    $1) return ;;

    _*) printf "ERROR: The filename may not start with underscore\n" \
            > /dev/stderr;
        exit 1;;
    */*) printf "ERROR: The filename may not contain '/' \n" \
            > /dev/stderr;
        exit 1;;
    "") printf "ERROR: The filename may not be empty \n" \
            > /dev/stderr;
        exit 1;;
  esac

  # if ! [[ $newname =~ ^[a-zA-Z]+$ ]]; then
  #   printf "ERROR: Invalid filename '$newname' \n" \
  #           > /dev/stderr;
  #   exit 1;
  # fi

  mv "$1.md" "$newname.md";
}

main() {
  _FIRST=true
    
  while $_FIRST || $PERSISTENT; do
    _FIRST=false
    
    [ -d "$NOTEBOOK_DIR" ] || mkdir $NOTEBOOK_DIR
    cd "$NOTEBOOK_DIR";
 
    $RENAME && { 
        choose <(list) "$1"
        rename "$CHOISE";
        exit 0; 
    }
    $DELETE && { 
        choose <(list) "$1"
        delete "$CHOISE"; 
        exit 0; 
    }
    $PRINT && {
        choose <(list) "$1"
        [ -z "$CHIOSE" ] && return;
        cat "$CHIOSE"; 
        exit 0;
    }

    cases="_New,_Remove,_Rename"
    choose <( list; echo "$cases" | tr , '\n'; ) "$1"
    [ -z "$CHOISE" ] && return

    # choise="$( { list; echo "$cases" | tr , '\n'; } | _dmenu)" \
    #     || exit 0

    case "$CHOISE" in
        "_New") 
            fn="$(echo "" | _dmenu)" || exit 0;
            open "$fn.md" ;;
        "_Remove") 
            choose <(list); delete "$CHOISE" ;;
        "_Rename") 
            choose <(list); rename "$CHOISE";;
        *)        
            open "$CHOISE.md" ;
    esac;
  done
}

_usage() { 
    echo "$ nb [OPTIONS] [note]"
    echo ""
    echo "Notebook managment script"
    echo ""
    # echo " Description "
    # echo ""
    echo "options:"
    echo "  -p,  --print     print the content of notebook"
    echo "  -nw, --newwin    open in new window"
    echo "  -d,  --delete    delete note"
    echo "  -rn, --rename    rename note"
    echo "  -h,  --help      print this message"
}

# Read arguments
POSITIONAL=()
while [[ $# -gt 0 ]]; do
case $1 in
    --persistent|-pp)  PERSISTENT=true ;;
    --print|-p)     PRINT=true ;;
    --delete|-d)    DELETE=true ;;
    --rename|-rn)   RENAME=true ;;
    --newwin|-nw)   NEWWIN=true ;;
    --menu)         MENU=$2; shift;;
    -h|-?|--help)   _usage; exit 0 ;;
    -*) echo "Incorrect options provided '$1'"; exit 1 ;;
    *) POSITIONAL+=("$1") ;;
esac; shift;
done
set -- "${POSITIONAL[@]}"

main "$@"
