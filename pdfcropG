#!/usr/bin/python3

from tkinter import *
import tempfile

import PyPDF2
from pdf2image import convert_from_path

import os, sys


def pdfcrop(pdffile, rect, page_nr=1, output=None):
    with tempfile.TemporaryDirectory() as path:
        os.system(f'pdftk "{pdffile}" cat {page_nr} output {path}/page.pdf')
        os.system(f'pdfcrop --bbox "{rect[0]} {rect[1]} {rect[2]} {rect[3]}" {path}/page.pdf')
        if not (output):
            output = "{}-crop.pdf".format(pdffile[:-4] if pdffile.endswith('.pdf') else pdffile);
        os.system(f'mv {path}/page-crop.pdf "{output}"');

def getPDFPageAsJPEG(pdffile, page_nr=1, transparent=False):
    pdf = PyPDF2.PdfFileReader(pdffile,"rb")
    p = pdf.getPage(0)

    w_in_user_space_units = p.mediaBox.getWidth()
    h_in_user_space_units = p.mediaBox.getHeight()

    # 1 user space unit is 1/72 inch
    # 1/72 inch ~ 0.352 millimeters

    w = float(p.mediaBox.getWidth()) / 72
    h = float(p.mediaBox.getHeight()) / 72

    print(w,h)

    with tempfile.TemporaryDirectory() as path:
        kwargs = {
            'dpi': 500/w,
            'output_folder': path,
            'first_page': page_nr,
            'last_page': page_nr,
            'transparent': False
        };
        page = convert_from_path(pdffile, **kwargs)[0];
        return (PhotoImage(file=page.filename), page.size, (w,h));


class Paint(object):

    def __init__(self, pdffile, page_nr=1):
        self.root = Tk()

        self.pdffile = pdffile;
        self.page_nr = page_nr;

        self.img, self.size, self.pdfsize = getPDFPageAsJPEG(self.pdffile, self.page_nr);

        self.clip_button = Button(self.root, text='pen', command=self.clip)
        self.clip_button.pack(fill=X)

        self.outfile = StringVar()
        if (pdffile.endswith('.pdf')):
            self.outfile.set(f'{pdffile[:-4]}-crop.pdf');
        else:
            self.outfile.set(f'{pdffile}-crop.pdf');
        self.output_entry = Entry(self.root, textvariable=self.outfile);
        self.output_entry.pack(fill=X)

        self.c = Canvas(self.root, bg='white', width=self.size[0], height=self.size[1])
        self.c.create_image(0, 0, image=self.img, anchor='nw')
        self.c.pack();


        self.setup()
        self.root.mainloop()

    def setup(self):
        self.move_rect_edge = [False]*4;
        self.rect = [self.size[0]/3, self.size[1]/3, self.size[0]*2/3, self.size[1]*2/3];

        self.c.create_rectangle(*self.rect, outline='black', width=5);

        self.c.bind('<Enter>', self.clip)

        self.c.bind('<B1-Motion>', self.move)
        self.c.bind('<ButtonPress-1>', self.press)
        self.c.bind('<ButtonRelease-1>', self.reset)


    def clip(self):
        r = self.rect;
        xx = [r[0], self.size[1]-r[3], r[2], self.size[1]-r[1]]
        xx = [int(x*self.pdfsize[0]/self.size[0]*72) for x in xx]
        print(xx);
        pdfcrop(self.pdffile, xx, self.page_nr, self.outfile.get());

    def move(self, event):
        if self.move_rect_edge[0]:
            self.rect[0] = min(event.x, self.rect[2]-10);
        if self.move_rect_edge[2]:
            self.rect[2] = max(event.x, self.rect[0]+10);
        if self.move_rect_edge[1]:
            self.rect[1] = min(event.y, self.rect[3]-10);
        if self.move_rect_edge[3]:
            self.rect[3] = max(event.y, self.rect[1]+10);

        self.c.create_image(0, 0, image=self.img, anchor='nw')
        self.c.create_rectangle(*self.rect, outline='black', width=5);


    def press(self, event):
        x, y = event.x, event.y;
        r = self.rect;
        tol = 10;

        self.move_rect_edge = [
            abs(x - r[0]) < tol and r[1]-tol < y < r[3]+tol,
            abs(y - r[1]) < tol and r[0]-tol < x < r[2]+tol,
            abs(x - r[2]) < tol and r[1]-tol < y < r[3]+tol,
            abs(y - r[3]) < tol and r[0]-tol < x < r[2]+tol
        ];

    def reset(self, event):
        self.move_rect_edge = [False]*4;


if __name__ == '__main__':
    if not (1 < len(sys.argv) < 4):
        print("Wrong number of arguments.\nSyntax: {0} <pdf> [page number]".format(sys.argv[0]))
        exit(1);
    if (len(sys.argv) == 3):
        page_nr = eval(sys.argv[2]);
        if type(page_nr) != int:
            print("Page number most be a integer"); exit(1);
        Paint(sys.argv[1], page_nr)
    else:
        Paint(sys.argv[1])
